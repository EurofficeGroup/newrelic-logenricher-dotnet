trigger:
  branches:
    include:
      - master
      - refs/tags/v*
    exclude:
      - gh-pages

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:

- task: SonarCloudPrepare@1
  displayName: 'SonarCloud - Prepare for Analysis'
  inputs:
    SonarCloud: 'SonarCloud'
    organization: '$(SonarCloudOrganization)'
    projectKey: '$(SonarCloudProjectKey)'
    projectName: '$(SonarCloudProjectName)'
    projectVersion: '$(Build.BuildNumber)'
    extraProperties: |
     sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/Coverage/coverage.opencover.xml
     sonar.exclusions=**/wwwroot/lib/**/*

- script: dotnet build NewRelic.LogEnrichers.sln --configuration $(buildConfiguration)
  displayName: 'Build (configuration=$(buildConfiguration))'

- script: dotnet test src/Serilog/NewRelic.LogEnrichers.Serilog.Tests --no-build --no-restore --configuration $(buildConfiguration) --logger trx
  displayName: 'Run Serilog Unit Tests'

- script: dotnet test src/NLog/NewRelic.LogEnrichers.NLog.Tests --no-build --no-restore --configuration $(buildConfiguration) --logger trx
  displayName: 'Run NLog Unit Tests'

- task: PublishTestResults@2
  displayName: 'Publish All Test Results'
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true

- task: SonarCloudAnalyze@1
  displayName: 'SonarCloud - Code analysis'

- task: SonarCloudPublish@1
  displayName: 'SonarCloud - Publish Quality Gate Results'
  

- task: PowerShell@2
  displayName: "SonarCloud - Valiate Quality Gate Results"
  condition: and ( succeeded(), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranch'], 'master'))
  inputs:
    filePath: 'build/CheckSonarCloudQualityGate.ps1'
    arguments: '-SonarServerName "sonarcloud.io" -SonarProjectKey "$(SonarCloudProjectKey)" -SonarToken "$(SonarCloudAuthKey)" -PullRequestNumber $(System.PullRequest.PullRequestNumber)'

- task: CopyFiles@2
  condition: succeeded()
  displayName: 'Copy Serilog Build Artifacts to Staging Location'
  inputs:
    contents: src/Serilog/NewRelic.LogEnrichers.Serilog/**/?(*.nupkg|*.snupkg)
    targetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true

- task: CopyFiles@2
  condition: succeeded()
  displayName: 'Copy NLog Build Artifacts to Staging Location'
  inputs:
    contents: src/NLog/NewRelic.LogEnrichers.NLog/**/?(*.nupkg|*.snupkg)
    targetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true

- task: PublishBuildArtifacts@1
  condition: succeeded()
  displayName: 'Publish Build Artifacts'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'lic-drop' 

- task: NuGetCommand@2
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq(variables['pushNupkg'], 'true'))
  displayName: 'Push NuGet Packages'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'NuGet'
